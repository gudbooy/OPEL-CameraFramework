!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CLEAR	cam_core.h	46;"	d
CamV4l2CapCheck	cam_cap_check.cpp	/^CamV4l2CapCheck::CamV4l2CapCheck()$/;"	f	class:CamV4l2CapCheck
CamV4l2CapCheck	cam_cap_check.h	/^class CamV4l2CapCheck{$/;"	c
Cam_V4L2	cam_core.h	/^typedef struct Cam_V4L2$/;"	s
Cam_V4L2	cam_core.h	/^}Cam_V4L2;$/;"	t	typeref:struct:Cam_V4L2
Camera	cam_core.cpp	/^Camera::Camera()$/;"	f	class:Camera
Camera	cam_core.cpp	/^Camera::Camera(char* deviceName)$/;"	f	class:Camera
Camera	cam_core.h	/^class Camera$/;"	c
CameraProperty	cam_property.cpp	/^CameraProperty::CameraProperty()$/;"	f	class:CameraProperty
CameraProperty	cam_property.cpp	/^CameraProperty::CameraProperty(bool isRec)$/;"	f	class:CameraProperty
CameraProperty	cam_property.h	/^class CameraProperty$/;"	c
CameraRequest	cam_request.h	/^typedef struct CameraRequest$/;"	s
CameraRequest	cam_request.h	/^}CameraRequest;$/;"	t	typeref:struct:CameraRequest
CameraStatus	cam_status.cpp	/^CameraStatus::CameraStatus()$/;"	f	class:CameraStatus
CameraStatus	cam_status.h	/^class CameraStatus$/;"	c
Camera_Ctrl	cam_ctrl.h	/^class Camera_Ctrl$/;"	c
DEFAULT_COUNT	cam_property.h	23;"	d
DEFAULT_HEIGHT	cam_property.h	27;"	d
DEFAULT_WIDTH	cam_property.h	26;"	d
H_FHD	cam_ctrl.h	22;"	d
H_HD	cam_ctrl.h	19;"	d
H_SVGA	cam_ctrl.h	10;"	d
H_SXGA	cam_ctrl.h	16;"	d
H_VGA	cam_ctrl.h	7;"	d
H_XGA	cam_ctrl.h	13;"	d
INDEX_OF_OPENCV_THR	main.cpp	18;"	d	file:
INDEX_OF_REC_THR	main.cpp	19;"	d	file:
InitSharedPropertyToTarget	cam_property.cpp	/^bool CameraProperty::InitSharedPropertyToTarget(property* prop)$/;"	f	class:CameraProperty
MAX_V4L2_BUFFERS	cam_core.h	47;"	d
NUM_OF_THREADS	main.cpp	16;"	d	file:
OPELCamThread	main.cpp	/^static pthread_t OPELCamThread[NUM_OF_THREADS]; $/;"	v	file:
OPELCamera	cam_core.cpp	/^OPELCamera::OPELCamera()$/;"	f	class:OPELCamera
OPELCamera	cam_core.h	/^class OPELCamera$/;"	c
OPENCV_DEFAULT_PIXFORMAT	cam_property.h	25;"	d
OPENCV_PROP_SHM	cam_status.h	19;"	d
OPENCV_SHM_KEY	cam_property.h	28;"	d
OPENCV_SHM_KEY_FOR_PROPERTY	cam_property.h	30;"	d
OpenCVSupport	cam_core.h	/^class OpenCVSupport : public OPELCamera$/;"	c
OptLast	cam_core.h	49;"	d
REC	cam_request.h	/^enum kinds {openCV=0, REC, setProperty};$/;"	e	enum:kinds
REC_DEFAULT_HEIGHT	cam_property.h	34;"	d
REC_DEFAULT_PIXFORMAT	cam_property.h	35;"	d
REC_DEFAULT_WIDTH	cam_property.h	33;"	d
REC_SHM_KEY	cam_property.h	36;"	d
REC_SHM_KEY_FOR_PROPERTY	cam_property.h	37;"	d
Record	cam_core.h	/^class Record : public OPELCamera$/;"	c
SHM_KEY	cam_core.h	40;"	d
V4L2_DEFAULT_HEIGHT	cam_core.h	43;"	d
V4L2_DEFAULT_WIDTH	cam_core.h	42;"	d
W_FHD	cam_ctrl.h	21;"	d
W_HD	cam_ctrl.h	18;"	d
W_SVGA	cam_ctrl.h	9;"	d
W_SXGA	cam_ctrl.h	15;"	d
W_VGA	cam_ctrl.h	6;"	d
W_XGA	cam_ctrl.h	12;"	d
_CAM_CAP_CHECK_H_	cam_cap_check.h	2;"	d
_CAM_CORE_H_	cam_core.h	2;"	d
_CAM_CTRL_H_	cam_ctrl.h	2;"	d
_CAM_PROPERTY_H_	cam_property.h	2;"	d
_CAM_PROXY_H_	cam_proxy.h	2;"	d
_CAM_REQUEST_H_	cam_request.h	2;"	d
_CAM_STATUS_H_	cam_status.h	2;"	d
allowRunning	cam_property.h	/^	bool allowRunning;$/;"	m	struct:property
buf	cam_core.h	/^	struct v4l2_buffer buf;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_buffer
buf	cam_property.h	/^								struct v4l2_buffer* buf;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_buffer
buffer	cam_core.h	/^typedef struct buffer{$/;"	s
buffer	cam_core.h	/^}buffer;$/;"	t	typeref:struct:buffer
bufferIndex	cam_core.h	/^	int bufferIndex; $/;"	m	struct:Cam_V4L2
bufferIndex	cam_core.h	/^	int bufferIndex;$/;"	m	class:Camera
bufferIndex	cam_property.h	/^								int bufferIndex;$/;"	m	class:CameraProperty
buffer_num	cam_property.h	/^								int buffer_num;$/;"	m	class:CameraProperty
buffer_num	cam_property.h	/^	int buffer_num; $/;"	m	struct:property
buffer_size	cam_property.h	/^								int buffer_size;$/;"	m	class:CameraProperty
buffer_size	cam_property.h	/^	int buffer_size; $/;"	m	struct:property
buffers	cam_core.h	/^				   buffer* buffers;$/;"	m	class:Record
buffers	cam_core.h	/^			buffer* buffers;$/;"	m	class:OpenCVSupport
buffers	cam_core.h	/^	buffer* buffers;$/;"	m	class:Camera
cam	cam_core.cpp	/^Camera* Camera::cam = NULL;$/;"	m	class:Camera	file:
cam	cam_core.h	/^	static Camera* cam;$/;"	m	class:Camera
cam	cam_ctrl.h	/^		Camera* cam;$/;"	m	class:Camera_Ctrl
camProp	cam_cap_check.h	/^				CameraProperty* camProp;$/;"	m	class:CamV4l2CapCheck
camProp	cam_core.h	/^								CameraProperty* camProp;			$/;"	m	class:OPELCamera
camStats	cam_status.cpp	/^CameraStatus* CameraStatus::camStats = NULL;$/;"	m	class:CameraStatus	file:
camStats	cam_status.h	/^	  static CameraStatus* camStats;$/;"	m	class:CameraStatus
camStatus	main.cpp	/^CameraStatus* camStatus;$/;"	v
cap	cam_core.h	/^	struct v4l2_capability cap;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_capability
cap	cam_core.h	/^	struct v4l2_capability cap;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_capability
cap	cam_property.h	/^								struct v4l2_capability* cap;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_capability
capabilities	cam_cap_check.h	/^				unsigned capabilities;$/;"	m	class:CamV4l2CapCheck
checkDeviceCapabilities	cam_cap_check.cpp	/^void CamV4l2CapCheck::checkDeviceCapabilities()$/;"	f	class:CamV4l2CapCheck
close	cam_request.h	/^enum operations {init=0, start, stop, close};$/;"	e	enum:operations
close_device	cam_core.cpp	/^bool Camera::close_device()$/;"	f	class:Camera
close_device	cam_core.cpp	/^bool OpenCVSupport::close_device()$/;"	f	class:OpenCVSupport
close_device	cam_record.cpp	/^bool Record::close_device()$/;"	f	class:Record
compr	cam_core.h	/^	struct v4l2_jpegcompression compr;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_jpegcompression
compr	cam_core.h	/^	struct v4l2_jpegcompression compr;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_jpegcompression
compr	cam_property.h	/^								struct v4l2_jpegcompression* compr;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_jpegcompression
control	cam_core.h	/^	struct v4l2_control control;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_control
control	cam_core.h	/^	struct v4l2_control control;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_control
control	cam_property.h	/^								struct v4l2_control* control;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_control
count	cam_core.h	/^	unsigned long long count;$/;"	m	class:Camera
count	cam_property.h	/^								unsigned int* count;$/;"	m	class:CameraProperty
crop	cam_core.h	/^	struct v4l2_crop crop;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_crop
crop	cam_core.h	/^	struct v4l2_crop crop;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_crop
crop	cam_property.h	/^								struct v4l2_crop* crop;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_crop
cropcap	cam_core.h	/^	struct v4l2_cropcap cropcap;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_cropcap
cropcap	cam_core.h	/^	struct v4l2_cropcap cropcap;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_cropcap
cropcap	cam_property.h	/^								struct v4l2_cropcap* cropcap;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_cropcap
ctl_parameters	cam_core.h	/^struct ctl_parameters{$/;"	s
dbus_filter	main.cpp	/^static DBusHandlerResult dbus_filter(DBusConnection *conn, DBusMessage *message, void *user_data)$/;"	f	file:
deleteCameraProperty	cam_core.cpp	/^void OPELCamera::deleteCameraProperty()$/;"	f	class:OPELCamera
deviceHandle	cam_core.h	/^	int deviceHandle;$/;"	m	class:Camera
deviceHandle	cam_core.h	/^	int deviceHandle;$/;"	m	struct:Cam_V4L2
deviceHandle	cam_property.h	/^								int deviceHandle;$/;"	m	class:CameraProperty
deviceName	cam_core.h	/^	char* deviceName;$/;"	m	struct:Cam_V4L2
deviceName	cam_core.h	/^const static char* deviceName = "\/dev\/video0";$/;"	v
do_handle_cap	cam_record.cpp	/^static int do_handle_cap(CameraProperty* camProp, buffer* buffers)$/;"	f	file:
eos	cam_core.h	/^			bool eos;$/;"	m	class:OpenCVSupport
errExit	main.cpp	15;"	d	file:
errExit	test.cpp	4;"	d	file:
errno_exit	cam_core.cpp	/^static void errno_exit(const char *s)$/;"	f	file:
fd	cam_core.h	/^	int fd;$/;"	m	class:Camera
fd	cam_property.h	/^								int fd;$/;"	m	class:CameraProperty
fd_name	cam_core.h	/^	char fd_name[80];$/;"	m	struct:ctl_parameters
field	cam_core.h	/^	enum v4l2_field field;$/;"	m	class:Camera	typeref:enum:Camera::v4l2_field
field	cam_property.h	/^								enum v4l2_field field;$/;"	m	class:CameraProperty	typeref:enum:CameraProperty::v4l2_field
filename_active	cam_core.h	/^	bool filename_active;$/;"	m	struct:ctl_parameters
first	main.cpp	/^bool first;$/;"	v
fmt	cam_core.h	/^	struct v4l2_format fmt;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_format
fmt	cam_property.h	/^								struct v4l2_format* fmt;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_format
form	cam_core.h	/^	struct v4l2_format form;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_format
freq	cam_core.h	/^	double freq;$/;"	m	struct:ctl_parameters
getBuffer	cam_property.h	/^								struct v4l2_buffer* getBuffer(void) {return this->buf; }$/;"	f	class:CameraProperty
getBufferNum	cam_property.h	/^								int getBufferNum(void) { return this->buffer_num; } $/;"	f	class:CameraProperty
getBufferSize	cam_property.h	/^								int getBufferSize(void) { return this->buffer_size; }$/;"	f	class:CameraProperty
getCameraProperty	cam_core.cpp	/^CameraProperty* OPELCamera::getCameraProperty() const$/;"	f	class:OPELCamera
getCapability	cam_property.h	/^								struct v4l2_capability* getCapability(void) { return this->cap; }$/;"	f	class:CameraProperty
getCount	cam_property.h	/^							  unsigned int* getCount() { return this->count; }$/;"	f	class:CameraProperty
getCrop	cam_property.h	/^								struct v4l2_crop* getCrop(void) { return this->crop; }$/;"	f	class:CameraProperty
getCropcap	cam_property.h	/^								struct v4l2_cropcap* getCropcap(void) { return this->cropcap; } $/;"	f	class:CameraProperty
getEos	cam_core.cpp	/^bool OpenCVSupport::getEos(void)$/;"	f	class:OpenCVSupport
getField	cam_property.h	/^								enum v4l2_field getField() { return this->field; }$/;"	f	class:CameraProperty
getFormat	cam_property.h	/^								struct v4l2_format* getFormat(void) {return this->fmt; }$/;"	f	class:CameraProperty
getHeight	cam_property.h	/^								int getHeight() { return this->height; }$/;"	f	class:CameraProperty
getInstance	cam_core.cpp	/^Camera* Camera::getInstance()$/;"	f	class:Camera
getInstance	cam_core.cpp	/^Camera* Camera::getInstance(char* deviceName)$/;"	f	class:Camera
getInstance	cam_status.cpp	/^CameraStatus* CameraStatus::getInstance(void)$/;"	f	class:CameraStatus
getIsOpenCVInitialized	cam_status.h	/^	 bool getIsOpenCVInitialized() { return this->isOpenCVInitialized; }$/;"	f	class:CameraStatus
getIsOpenCVRunning	cam_status.h	/^	 bool getIsOpenCVRunning() { return this->isOpenCVRunning; }$/;"	f	class:CameraStatus
getIsRecInitialized	cam_status.h	/^	 bool getIsRecInitialized() { return this->isRecInitialized; }$/;"	f	class:CameraStatus
getIsRecRunning	cam_status.h	/^	 bool getIsRecRunning() { return this->isRecRunning; }$/;"	f	class:CameraStatus
getN_buffers	cam_property.h	/^						    unsigned int getN_buffers(void) {return this->n_buffer; }	$/;"	f	class:CameraProperty
getPixelformat	cam_property.h	/^								unsigned int getPixelformat() { return this->pixelformat; }$/;"	f	class:CameraProperty
getRequestbuffers	cam_property.h	/^								struct v4l2_requestbuffers* getRequestbuffers(void) { return this->req; } 	$/;"	f	class:CameraProperty
getShmKey	cam_property.h	/^								key_t getShmKey(void){return this->shmkey;}$/;"	f	class:CameraProperty
getThrMutex	cam_status.cpp	/^void CameraStatus::getThrMutex(pthread_mutex_t& mutex) $/;"	f	class:CameraStatus
getType	cam_property.h	/^								enum v4l2_buf_type getType(void) {return this->type;}$/;"	f	class:CameraProperty
getWidth	cam_property.h	/^								int getWidth() { return this->width; }$/;"	f	class:CameraProperty
get_fd	cam_core.h	/^	int get_fd(void){ return this->fd; } 	$/;"	f	class:Camera
getfd	cam_property.h	/^							  int getfd(void) { return this->fd; } $/;"	f	class:CameraProperty
height	cam_core.h	/^	int width, height;$/;"	m	class:Camera
height	cam_property.h	/^								int width, height;$/;"	m	class:CameraProperty
height	cam_property.h	/^	int height;$/;"	m	struct:property
height	cam_request.h	/^	int height;$/;"	m	struct:CameraRequest
heigth	cam_core.h	/^	int width, heigth;$/;"	m	struct:Cam_V4L2
init	cam_request.h	/^enum operations {init=0, start, stop, close};$/;"	e	enum:operations
initProperty	cam_property.cpp	/^void CameraProperty::initProperty(property** prop)$/;"	f	class:CameraProperty
init_SharedMemoryRegion	cam_core.cpp	/^bool Camera::init_SharedMemoryRegion(int req_count, int buffer_size)$/;"	f	class:Camera
init_SharedMemorySpace	cam_core.cpp	/^static bool init_SharedMemorySpace(int req_count, int buffer_size, int shmid, void** shmPtr, key_t shmkey)$/;"	f	file:
init_device	cam_core.cpp	/^bool Camera::init_device()$/;"	f	class:Camera
init_device	cam_core.cpp	/^bool OpenCVSupport::init_device()$/;"	f	class:OpenCVSupport
init_device	cam_record.cpp	/^bool Record::init_device()$/;"	f	class:Record
init_userPointer	cam_core.cpp	/^bool OpenCVSupport::init_userPointer(unsigned int buffer_size)$/;"	f	class:OpenCVSupport
init_userPointer	cam_record.cpp	/^bool Record::init_userPointer(unsigned int buffer_size)$/;"	f	class:Record
init_userp	cam_core.cpp	/^bool Camera::init_userp(unsigned int buffer_size)$/;"	f	class:Camera
inp	cam_core.h	/^	struct v4l2_input inp;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_input
inp	cam_core.h	/^	struct v4l2_input inp;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_input
inp	cam_property.h	/^								struct v4l2_input* inp;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_input
isCCDRunning	cam_status.h	/^		bool isCCDRunning;$/;"	m	class:CameraStatus
isOpenCVInitialized	cam_status.h	/^		bool isOpenCVInitialized;$/;"	m	class:CameraStatus
isOpenCVRunning	cam_status.h	/^		bool isOpenCVRunning;$/;"	m	class:CameraStatus
isPropertyChanged	cam_property.h	/^	bool isPropertyChanged;$/;"	m	struct:property
isRecInitialized	cam_status.h	/^		bool isRecInitialized;$/;"	m	class:CameraStatus
isRecRunning	cam_status.h	/^		bool isRecRunning;$/;"	m	class:CameraStatus
is_openCVCamInit	main.cpp	/^static bool is_openCVCamInit;$/;"	v	file:
kind	cam_request.h	/^	enum kinds kind;$/;"	m	struct:CameraRequest	typeref:enum:CameraRequest::kinds
kinds	cam_request.h	/^enum kinds {openCV=0, REC, setProperty};$/;"	g
length	cam_core.h	/^	size_t length;$/;"	m	struct:buffer
libv4l2_init	cam_core.cpp	/^static bool libv4l2_init(CameraProperty* camProp)$/;"	f	file:
libv4l2_open	cam_core.cpp	/^static bool libv4l2_open(CameraProperty* camProp)$/;"	f	file:
main	main.cpp	/^int main()$/;"	f
main	test.cpp	/^int main()$/;"	f
mainLoop	cam_core.cpp	/^bool OpenCVSupport::mainLoop(CameraProperty* camProp, buffer* buffers)$/;"	f	class:OpenCVSupport
mainloop	cam_core.cpp	/^bool Camera::mainloop()$/;"	f	class:Camera
mode	cam_core.h	/^	int mode; $/;"	m	class:Camera
mode	cam_core.h	/^	int mode; $/;"	m	struct:Cam_V4L2
mode	cam_property.h	/^								int mode;$/;"	m	class:CameraProperty
mutex	cam_core.h	/^			pthread_mutex_t mutex;$/;"	m	class:OpenCVSupport
mutex	cam_property.h	/^								sem_t* mutex;$/;"	m	class:CameraProperty
mutex	cam_status.h	/^		pthread_mutex_t mutex;$/;"	m	class:CameraStatus
mutex_lock	main.cpp	/^pthread_mutex_t mutex_lock;$/;"	v
n_buffer	cam_core.h	/^	unsigned int n_buffer;	$/;"	m	class:Camera
n_buffer	cam_property.h	/^								unsigned int n_buffer;$/;"	m	class:CameraProperty
n_buffer	cam_property.h	/^	int n_buffer;		$/;"	m	struct:property
n_buffers	cam_core.h	/^	unsigned int n_buffers;$/;"	m	class:Camera
open	cam_core.cpp	/^bool OPELCamera::open()$/;"	f	class:OPELCamera
openCV	cam_request.h	/^enum kinds {openCV=0, REC, setProperty};$/;"	e	enum:kinds
openCVCameraSupportThr	main.cpp	/^void* openCVCameraSupportThr(void* args)$/;"	f
openCVProperty	main.cpp	/^static property* openCVProperty;$/;"	v	file:
openCV_cam	main.cpp	/^static OpenCVSupport* openCV_cam;$/;"	v	file:
openCV_camProp	main.cpp	/^static CameraProperty* openCV_camProp;$/;"	v	file:
open_device	cam_core.cpp	/^bool Camera::open_device(void)$/;"	f	class:Camera
operation	cam_request.h	/^	enum operations operation;$/;"	m	struct:CameraRequest	typeref:enum:CameraRequest::operations
operations	cam_request.h	/^enum operations {init=0, start, stop, close};$/;"	g
options	cam_core.h	/^	char options[OptLast];$/;"	m	struct:ctl_parameters
output_path	cam_core.h	/^					 char* output_path;$/;"	m	class:Record
params	cam_core.h	/^static struct ctl_parameters params;$/;"	v	typeref:struct:ctl_parameters
pid	cam_request.h	/^ 	pid_t pid;$/;"	m	struct:CameraRequest
pixelformat	cam_core.h	/^	int pixelformat;$/;"	m	class:Camera
pixelformat	cam_property.h	/^								unsigned int pixelformat;$/;"	m	class:CameraProperty
printSetValue	cam_property.cpp	/^void CameraProperty::printSetValue(void)$/;"	f	class:CameraProperty
processImg	cam_core.cpp	/^static void processImg(const void* p, int size)$/;"	f	file:
processName	cam_property.h	/^								char* processName;$/;"	m	class:CameraProperty
process_image	cam_core.cpp	/^void process_image(const void *p, int size)$/;"	f
property	cam_property.h	/^typedef struct property$/;"	s
property	cam_property.h	/^}property;$/;"	t	typeref:struct:property
queryctrl	cam_core.h	/^	struct v4l2_queryctrl queryctrl;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_queryctrl
queryctrl	cam_core.h	/^	struct v4l2_queryctrl queryctrl;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_queryctrl
queryctrl	cam_property.h	/^								struct v4l2_queryctrl* queryctrl;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_queryctrl
readFrame	cam_core.cpp	/^static bool readFrame(CameraProperty* camProp, buffer* buffers, unsigned& cnt, unsigned &last, struct timeval &tv_last)$/;"	f	file:
read_frame	cam_core.cpp	/^bool Camera::read_frame(void)$/;"	f	class:Camera
recCameraSupportThr	main.cpp	/^void* recCameraSupportThr(void* args)$/;"	f
recMainLoop	cam_record.cpp	/^static bool recMainLoop(CameraProperty* camProp, buffer* buffers)$/;"	f	file:
rec_cam	main.cpp	/^static OpenCVSupport* rec_cam;$/;"	v	file:
rec_camProp	main.cpp	/^static CameraProperty* rec_camProp;$/;"	v	file:
req	cam_core.h	/^	struct v4l2_requestbuffers req;$/;"	m	class:Camera	typeref:struct:Camera::v4l2_requestbuffers
req	cam_core.h	/^	struct v4l2_requestbuffers req;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::v4l2_requestbuffers
req	cam_property.h	/^								struct v4l2_requestbuffers* req;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::v4l2_requestbuffers
setBufferNum	cam_property.cpp	/^void CameraProperty::setBufferNum(int buffer_num)$/;"	f	class:CameraProperty
setBufferSize	cam_property.cpp	/^void CameraProperty::setBufferSize(int buffer_size)$/;"	f	class:CameraProperty
setCameraProperty	cam_cap_check.cpp	/^void CamV4l2CapCheck::setCameraProperty(CameraProperty* camProp)$/;"	f	class:CamV4l2CapCheck
setCameraProperty	cam_core.cpp	/^void OPELCamera::setCameraProperty(CameraProperty* camProp)$/;"	f	class:OPELCamera
setCount	cam_property.h	/^								void setCount(unsigned long long count) { *(this->count) = count; }$/;"	f	class:CameraProperty
setEos	cam_core.cpp	/^void OpenCVSupport::setEos(bool eos)$/;"	f	class:OpenCVSupport
setIsOpenCVInitialized	cam_status.h	/^	 void setIsOpenCVInitialized(bool isInitialized) $/;"	f	class:CameraStatus
setIsOpenCVRunning	cam_status.h	/^	 void setIsOpenCVRunning(bool isRunning) $/;"	f	class:CameraStatus
setIsRecInitialized	cam_status.h	/^	 void setIsRecInitialized(bool isInitialized) $/;"	f	class:CameraStatus
setIsRecRunning	cam_status.h	/^	 void setIsRecRunning(bool isRunning) $/;"	f	class:CameraStatus
setN_buffers	cam_property.h	/^								void setN_buffers(unsigned int n_buffer) {this->n_buffer = n_buffer; }$/;"	f	class:CameraProperty
setProperty	cam_request.h	/^enum kinds {openCV=0, REC, setProperty};$/;"	e	enum:kinds
setThrMutex	cam_core.h	/^	  void setThrMutex(pthread_mutex_t& mutex){ this->mutex = mutex; }$/;"	f	class:OpenCVSupport
setfd	cam_property.h	/^								void setfd(int fd) { this->fd = fd; }		$/;"	f	class:CameraProperty
shmPtr	cam_core.h	/^			void* shmPtr; $/;"	m	class:OpenCVSupport
shmPtr	cam_core.h	/^	void* shmPtr;$/;"	m	class:Camera
shmPtr_for_property	cam_property.h	/^								void* shmPtr_for_property;$/;"	m	class:CameraProperty
shm_buffer	cam_core.h	/^	void* shm_buffer;$/;"	m	struct:Cam_V4L2
shm_info	cam_core.h	/^			struct shmid_ds shm_info;$/;"	m	class:OpenCVSupport	typeref:struct:OpenCVSupport::shmid_ds
shm_info	cam_core.h	/^	struct shmid_ds shm_info;$/;"	m	class:Camera	typeref:struct:Camera::shmid_ds
shmid	cam_core.h	/^			int shmid;$/;"	m	class:OpenCVSupport
shmid	cam_core.h	/^	int shmid;$/;"	m	class:Camera
shmid_for_property	cam_property.h	/^								int shmid_for_property;$/;"	m	class:CameraProperty
shmkey	cam_property.h	/^								key_t shmkey;$/;"	m	class:CameraProperty
shmkey_for_property	cam_property.h	/^								key_t shmkey_for_property;$/;"	m	class:CameraProperty
start	cam_core.cpp	/^bool OpenCVSupport::start()$/;"	f	class:OpenCVSupport
start	cam_core.h	/^	void *start;$/;"	m	struct:buffer
start	cam_record.cpp	/^bool Record::start()$/;"	f	class:Record
start	cam_request.h	/^enum operations {init=0, start, stop, close};$/;"	e	enum:operations
start_capturing	cam_core.cpp	/^int Camera::start_capturing()$/;"	f	class:Camera
statusMutex	cam_status.h	/^		sem_t* statusMutex;    $/;"	m	class:CameraStatus
stop	cam_core.cpp	/^bool OpenCVSupport::stop()$/;"	f	class:OpenCVSupport
stop	cam_record.cpp	/^bool Record::stop()$/;"	f	class:Record
stop	cam_request.h	/^enum operations {init=0, start, stop, close};$/;"	e	enum:operations
stop_capturing	cam_core.cpp	/^int Camera::stop_capturing()$/;"	f	class:Camera
terminate_decoding	cam_core.h	/^	bool terminate_decoding;$/;"	m	struct:ctl_parameters
thr_id	main.cpp	/^int thr_id[2] = {0,};$/;"	v
timestamp	cam_core.h	/^	struct timeval timestamp; $/;"	m	class:Camera	typeref:struct:Camera::timeval
timestamp	cam_core.h	/^	struct timeval timestamp;$/;"	m	struct:Cam_V4L2	typeref:struct:Cam_V4L2::timeval
timestamp	cam_property.h	/^								struct timeval* timestamp;$/;"	m	class:CameraProperty	typeref:struct:CameraProperty::timeval
tuner_index	cam_core.h	/^	uint8_t tuner_index;$/;"	m	struct:ctl_parameters
type	cam_core.h	/^	enum v4l2_buf_type type;$/;"	m	class:Camera	typeref:enum:Camera::v4l2_buf_type
type	cam_core.h	/^	enum v4l2_buf_type type;$/;"	m	struct:Cam_V4L2	typeref:enum:Cam_V4L2::v4l2_buf_type
type	cam_property.h	/^								enum v4l2_buf_type type;$/;"	m	class:CameraProperty	typeref:enum:CameraProperty::v4l2_buf_type
uInitSharedPropertyToTarget	cam_property.cpp	/^bool CameraProperty::uInitSharedPropertyToTarget(property* prop)$/;"	f	class:CameraProperty
uinit_SharedMemorySpace	cam_core.cpp	/^static bool uinit_SharedMemorySpace(int shmid, void** shmPtr)$/;"	f	file:
uninit_SharedMemoryRegion	cam_core.cpp	/^bool Camera::uninit_SharedMemoryRegion()$/;"	f	class:Camera
uninit_SharedMemorySpace	cam_core.cpp	/^static bool uninit_SharedMemorySpace(int shmid)$/;"	f	file:
uninit_device	cam_core.cpp	/^bool Camera::uninit_device()$/;"	f	class:Camera
wait_limit	cam_core.h	/^	uint32_t wait_limit;$/;"	m	struct:ctl_parameters
width	cam_core.h	/^	int width, height;$/;"	m	class:Camera
width	cam_core.h	/^	int width, heigth;$/;"	m	struct:Cam_V4L2
width	cam_property.h	/^								int width, height;$/;"	m	class:CameraProperty
width	cam_property.h	/^	int width;$/;"	m	struct:property
width	cam_request.h	/^	int width;$/;"	m	struct:CameraRequest
xioctl	cam_core.cpp	/^static int xioctl(int fh, int request, void *arg)$/;"	f	file:
~Camera	cam_core.cpp	/^Camera::~Camera()$/;"	f	class:Camera
~CameraProperty	cam_property.cpp	/^CameraProperty::~CameraProperty()$/;"	f	class:CameraProperty
~CameraStatus	cam_status.cpp	/^CameraStatus::~CameraStatus()$/;"	f	class:CameraStatus
